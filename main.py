# -*- coding: utf-8 -*-
"""llama31_prompt_classifer.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1DgJ5M0HlQ-Mh8PeMJPo0ZSJf3If-vRaw
"""

FILE_PATH = '/app/data/test_data.xlsx'

import pandas as pd
import torch
from transformers import AutoModelForCausalLM, AutoTokenizer, AwqConfig
import os
from datetime import datetime

model_path = "hugging-quants/Meta-Llama-3.1-8B-Instruct-AWQ-INT4"
quantization_config = AwqConfig(
    bits=4,
    fuse_max_seq_len=128, # Note: Update this as per your use-case
    do_fuse=True,
)

model = AutoModelForCausalLM.from_pretrained(
    model_path,
    torch_dtype=torch.float16,
    low_cpu_mem_usage=True,
    device_map="auto",
    quantization_config=quantization_config
)

tokenizer = AutoTokenizer.from_pretrained(model_path)

def categoryClassfication(df, categoryList):
    def transformer(name):
        name = name[-10:]
        prompt = [
            {"role": "system", "content": "You are a helpful assistant that categorizes products into specific categories.(只需輸出產品名稱)"},
            {"role": "user", "content": f"將以下產品分類成以下類別: 上衣, 褲子, 裙子, 外套, 鞋子, 配飾. 產品名稱: {name}"},
        ]

        inputs = tokenizer.apply_chat_template(
            prompt,
            tokenize=True,
            add_generation_prompt=True,
            return_tensors="pt",
            return_dict=True,
        ).to("cuda")

        with torch.no_grad():
            outputs = model.generate(**inputs, do_sample=True, max_new_tokens=25)

        # 解碼輸出
        decoded_output = tokenizer.batch_decode(outputs, skip_special_tokens=True)
        output = decoded_output[0].split('\n')[-1]
        for category in categoryList:
            if category in output:
                return category
        return '其他'

    df['category'] = df['name'].apply(transformer)
    return df

df = pd.read_excel(FILE_PATH)
categoryList = ['上衣', '褲子', '裙子', '外套', '鞋子', '配飾']

newDf = categoryClassfication(df, categoryList)
# 生成包含原始數據和分類結果的新Excel文件
file_dir = os.path.dirname(FILE_PATH)
file_name = os.path.splitext(os.path.basename(FILE_PATH))[0]
current_date = datetime.now().strftime("%m_%d")
output_file_path = os.path.join(file_dir, f"{file_name}_{current_date}.xlsx")
newDf.to_excel(output_file_path, index=False)
print(f"已生成新的Excel文件：{output_file_path}")
print("以下是前5行數據預覽：")
print(newDf.head(5))
